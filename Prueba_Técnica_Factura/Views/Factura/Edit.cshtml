@model Prueba_Técnica_Factura.Models.Factura

@{
    ViewData["Title"] = "Editar Factura";
    var productos = ViewBag.Productos as List<Prueba_Técnica_Factura.Models.Producto>;
    var clientes = ViewBag.Clientes as List<Prueba_Técnica_Factura.Models.Cliente>;
    var productosJson = System.Text.Json.JsonSerializer.Serialize(productos);
}

<h2>Editar Factura</h2>

<form asp-action="Edit" method="post" id="facturaForm">
    @Html.HiddenFor(m => m.FacturaID)

    <div class="form-group">
        <label for="ClienteID">Cliente</label>
        <select asp-for="ClienteID" class="form-control" asp-items="@(new SelectList(clientes, "ClienteID", "Nombre"))" onchange="cargarClienteInfo(this.value)">
            <option value="">-- Seleccionar cliente --</option>
        </select>
    </div>

    <div id="clienteInfo" class="mb-3 text-secondary small">
        @* Info del cliente cargada por JS *@
    </div>

    <div class="form-group">
        <label for="Fecha">Fecha</label>
        <input asp-for="Fecha" class="form-control" />
    </div>

    <hr />
    <h4>Detalles de Factura</h4>

    <table class="table table-bordered" id="detalleTable">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody id="detalleBody">
            @for (int i = 0; i < Model.Detalles.Count; i++)
            {
                <tr>
                    <td>
                        <select name="Detalles[@i].ProductoID" class="form-control producto-select">
                            @foreach (var p in productos)
                            {
                                <option value="@p.ProductoID" selected="@(p.ProductoID == Model.Detalles[i].ProductoID ? "selected" : null)">@p.Nombre</option>

                            }
                        </select>
                    </td>
                    <td>
                        <input name="Detalles[@i].Cantidad" type="number" class="form-control cantidad" min="1" value="@Model.Detalles[i].Cantidad" />
                    </td>
                    <td>
                        <input name="Detalles[@i].PrecioUnitario" type="number" class="form-control precio" step="0.01" min="0.01" value="@Model.Detalles[i].PrecioUnitario.ToString("0.00")" readonly />
                    </td>
                    <td class="lineTotal">@((Model.Detalles[i].Cantidad * Model.Detalles[i].PrecioUnitario).ToString("0.00"))</td>
                    <td><button type="button" class="btn btn-danger btn-sm" onclick="eliminarFila(this)">X</button></td>
                </tr>
            }
        </tbody>
    </table>

    <button type="button" class="btn btn-secondary" onclick="agregarFila()">+ Agregar detalle</button>

    <div class="mt-3 text-end">
        <strong>Total Factura: $<span id="totalFactura">@Model.Total.ToString("0.00")</span></strong>
    </div>

    <hr />
    <button type="submit" class="btn btn-primary">Guardar</button>
    <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
</form>

@section Scripts {
    <script>
        let filaIndex = @Model.Detalles.Count;
        const productos = @Html.Raw(productosJson);

        function agregarFila() {
            const row = document.createElement('tr');
            row.innerHTML = `
                        <td>
                            <select name="Detalles[${filaIndex}].ProductoID" class="form-control producto-select">
                                ${productos.map(p => `<option value="${p.ProductoID}">${p.Nombre}</option>`).join('')}
                            </select>
                        </td>
                        <td><input name="Detalles[${filaIndex}].Cantidad" type="number" class="form-control cantidad" min="1" value="1" /></td>
                        <td><input name="Detalles[${filaIndex}].PrecioUnitario" type="number" class="form-control precio" min="0.01" step="0.01" value="0.00" readonly /></td>
                        <td class="lineTotal">0.00</td>
                        <td><button type="button" class="btn btn-danger btn-sm" onclick="eliminarFila(this)">X</button></td>
                    `;
            document.getElementById('detalleBody').appendChild(row);
            filaIndex++;
            recalcularTotales();
        }

        function eliminarFila(btn) {
            btn.closest('tr').remove();
            recalcularTotales();
        }

        function recalcularTotales() {
            let total = 0;
            document.querySelectorAll('#detalleBody tr').forEach(row => {
                const cantidadInput = row.querySelector('.cantidad');
                const precioInput = row.querySelector('.precio');
                const productoSelect = row.querySelector('.producto-select');

                const producto = productos.find(p => p.ProductoID == productoSelect.value);
                const cantidad = parseFloat(cantidadInput.value) || 0;

                if (producto) {
                    const precio = cantidad > 12 ? producto.PrecioMayor : producto.Precio;
                    precioInput.value = precio.toFixed(2);
                }

                const totalLinea = cantidad * parseFloat(precioInput.value || 0);
                row.querySelector('.lineTotal').innerText = totalLinea.toFixed(2);
                total += totalLinea;
            });
            document.getElementById('totalFactura').innerText = total.toFixed(2);
        }

        document.getElementById('detalleBody').addEventListener('input', function (e) {
            if (e.target.classList.contains('cantidad')) {
                recalcularTotales();
            }
        });

        document.getElementById('detalleBody').addEventListener('change', function (e) {
            if (e.target.classList.contains('producto-select')) {
                recalcularTotales();
            }
        });

        function cargarClienteInfo(clienteId) {
            if (!clienteId) {
                document.getElementById('clienteInfo').innerHTML = '';
                return;
            }

            fetch(`/Factura/ClienteInfo/${clienteId}`)
                .then(response => response.json())
                .then(cliente => {
                    document.getElementById('clienteInfo').innerHTML = `
                                <div><strong>Nombre:</strong> ${cliente.nombre}</div>
                                <div><strong>Cédula/RNC:</strong> ${cliente.cedulaRnc}</div>
                                <div><strong>Tipo Documento:</strong> ${tipoDocumentoTexto(cliente.tipoDocumento)}</div>
                            `;
                });
        }

        function tipoDocumentoTexto(tipo) {
            switch (tipo) {
                case 1: return "Cédula";
                case 2: return "Pasaporte";
                case 3: return "RNC";
                default: return "Desconocido";
            }
        }

        recalcularTotales();
    </script>
}

